/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-12-11 10:43:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class recipe_002dread_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

private String getCookieValue(Cookie[] cookies, String name) {
		String value = null;
		if (cookies == null)
			return null;
		for (Cookie cookie : cookies) {
			if (cookie.getName().equals(name))
				return cookie.getValue();
		}
		return null;
	}
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");
Cookie[] cookies = request.getCookies();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>main page</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"recipe-read1.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "maintools.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');

	String managername = "";
	int ref = 0, id = 0, view = 0, likes;
	String name = "";
	String date = "", ingredient = "", tag = "", image = "", step_explain = "";
	String recipename = "", menu_name = "", content = "", menu_explain = "";
	Connection conn = null;
	Statement stmt = null;
	ResultSet rs = null;
	String myname = getCookieValue(cookies, "NAME");
	id = Integer.parseInt(request.getParameter("id"));

	try {
		Class.forName("com.mysql.jdbc.Driver");
		String url = "jdbc:mysql://localhost:3306/webproject?serverTimezone=UTC";
		conn = DriverManager.getConnection(url, "root", "0000");
		stmt = conn.createStatement();
		String sql = "select * from manager";
		rs = stmt.executeQuery(sql);
	} catch (Exception e) {
		out.println("DB 연동	오류입니다. : " + e.getMessage());
	}
	if (rs.next()) {
		managername = rs.getString("name");
	}

	try {
		String sql = "select * from recipe where id=" + id;
		rs = stmt.executeQuery(sql);
	} catch (Exception e) {
		out.println("DB 연동 오류입니다. : " + e.getMessage());
	}
	if (rs != null) {
		rs.next();
		name = rs.getString("name");
		menu_name = rs.getString("menu_name");
		menu_explain = rs.getString("menu_explain");
		menu_explain = menu_explain.replace("\r\n", "<br>");
		step_explain = rs.getString("step_explain");
		step_explain = step_explain.replace("\r\n", "<br>");
		date = rs.getString("date");
		ingredient = rs.getString("ingredient");
		tag = rs.getString("tag");
		image = rs.getString("image");
		view = Integer.parseInt(rs.getString("view"));
		view++;
		likes = Integer.parseInt(rs.getString("likes"));
	}
	
      out.write("\r\n");
      out.write("	<div id=\"wrap\">\r\n");
      out.write("		<div id=\"main\">\r\n");
      out.write("			<div class=\"contents\">\r\n");
      out.write("				<div class=\"content\">\r\n");
      out.write("					<img src=\"recipefolder/");
      out.print(image);
      out.write("\" class=\"food\">\r\n");
      out.write("					<h1>");
      out.print(name);
      out.write("님의\r\n");
      out.write("						");
      out.print(menu_name);
      out.write("</h1>\r\n");
      out.write("					<h2>");
      out.print(menu_explain);
      out.write("</h2>\r\n");
      out.write("				</div>\r\n");
      out.write("				<br> <br>\r\n");
      out.write("				<hr>\r\n");
      out.write("				<div class=\"ingredient\">\r\n");
      out.write("					<h3>재료</h3>\r\n");
      out.write("					<p>\r\n");
      out.write("						");

						String sql1 = "update recipe set view=" + view + " where id =" + id;
						try {
							stmt.executeUpdate(sql1);
						} catch (Exception e) {
							out.println("DB 연동 오류입니다. : " + e.getMessage());
						}
						String ingr[] = ingredient.split("&");
						for (int i = 0; i < ingr.length; i++) {
							String pout[] = ingr[i].split("/");
							if (pout.length > 0) {
						
      out.write("\r\n");
      out.write("						");
      out.print(pout[0]);
      out.write("\r\n");
      out.write("						<br>\r\n");
      out.write("						");

						}
						if (pout.length > 1) {
						
      out.write("\r\n");
      out.write("						");
      out.print(pout[1]);
      out.write("<br>\r\n");
      out.write("						");

						}
						}
						
      out.write("\r\n");
      out.write("					</p>\r\n");
      out.write("				</div>\r\n");
      out.write("				<br>\r\n");
      out.write("				<hr>\r\n");
      out.write("				<div class=\"make\">\r\n");
      out.write("					<h3>요리 방법</h3>\r\n");
      out.write("					<table>\r\n");
      out.write("						");

						String explain[] = step_explain.split("&");
						String sql = "select * from images where id=" + id + " order by ref desc";
						int cnt = 0;
						rs = stmt.executeQuery(sql);
						while (rs.next() && (cnt < explain.length)) {
							image = rs.getString("image");
						
      out.write("\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td>");
      out.print(cnt + 1);
      out.write(".</td>\r\n");
      out.write("							<td><img src=\"recipefolder/");
      out.print(image);
      out.write("\" class=\"food\"></td>\r\n");
      out.write("							<td>");
      out.print(explain[cnt]);
      out.write("</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("						");

						cnt++;
						}
						
      out.write("\r\n");
      out.write("					</table>\r\n");
      out.write("				</div>\r\n");
      out.write("				<br>\r\n");
      out.write("				<hr>\r\n");
      out.write("				");

				String tags[] = tag.split("#");
				
      out.write("\r\n");
      out.write("				<div class=\"hashtag\">\r\n");
      out.write("					<table>\r\n");
      out.write("						<tr>\r\n");
      out.write("							<th># 태그</th>\r\n");
      out.write("							");

							for (int i = 0; i < tags.length; i++) {
							
      out.write("\r\n");
      out.write("							<td>");
      out.print(tags[i]);
      out.write("</td>\r\n");
      out.write("							");

							}
							
      out.write("\r\n");
      out.write("						</tr>\r\n");
      out.write("					</table>\r\n");
      out.write("				</div>\r\n");
      out.write("				<hr>\r\n");
      out.write("				<div class=\"buttons\">\r\n");
      out.write("					");

					if (name.equals(myname) || managername.equals(myname)) {
					
      out.write("\r\n");
      out.write("					<form action=\"recipe-modify.jsp?id=");
      out.print(id);
      out.write("\" method=\"post\">\r\n");
      out.write("						<input type=\"submit\" value=\"수정하기\">\r\n");
      out.write("					</form>\r\n");
      out.write("					<form action=\"recipe-delete-db.jsp?id=");
      out.print(id);
      out.write("\" method=\"post\">\r\n");
      out.write("						<input type=\"submit\" value=\"삭제하기\">\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("				<div class=\"empty_space\"></div>\r\n");
      out.write("				<div class=\"empty_space\"></div>\r\n");
      out.write("				<div class=\"empty_space\"></div>\r\n");
      out.write("\r\n");
      out.write("				<div id=\"reply_title\">\r\n");
      out.write("					<big><b>댓글</b></big>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"makereply\">\r\n");
      out.write("					<form action=\"comment-insert-db.jsp?id=");
      out.print(id);
      out.write("\" method=\"post\">\r\n");
      out.write("						");

						if (myname != null) {
						
      out.write("\r\n");
      out.write("						<input type=\"textarea\" name=\"write\"\r\n");
      out.write("							placeholder=\"주제와 무관한 댓글, 타인의 권리를 침해하거나 명예를 훼손하는 댓글은 별도의 통보 없이 제재를 받을 수 있습니다.\" /><br>\r\n");
      out.write("						<br>\r\n");
      out.write("						<button type=\"submit\">등록</button>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"reply\">\r\n");
      out.write("					<hr>\r\n");
      out.write("					<table>\r\n");
      out.write("						");

						try {
							sql = "select * from comments where id=" + id;
							rs = stmt.executeQuery(sql);

						} catch (Exception e) {
							out.println("DB 연동 오류입니다. : " + e.getMessage());
						}

						while (rs.next()) {
						
      out.write("\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td><a>");
      out.print(rs.getString("name"));
      out.write("</a></td>\r\n");
      out.write("							<td>");
      out.print(rs.getString("date"));
      out.write("</td>\r\n");
      out.write("							<td class=\"contents\">");
      out.print(rs.getString("content"));
      out.write("</td>\r\n");
      out.write("							");

							if (myname != null) {
								if (myname.equals(name) || managername.equals(myname)) {
							
      out.write("\r\n");
      out.write("							<form\r\n");
      out.write("								action=\"comment-delete-db.jsp?ref=");
      out.print(rs.getString("ref"));
      out.write("&id=");
      out.print(id);
      out.write("\"\r\n");
      out.write("								method=\"post\">\r\n");
      out.write("								<td><input type=\"submit\" value=\"댓글 삭제\" /></td>\r\n");
      out.write("							</form>\r\n");
      out.write("							");

							}
							}
							
      out.write("\r\n");
      out.write("						</tr>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</table>\r\n");
      out.write("					<hr>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
